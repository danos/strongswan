--- /dev/null
+++ b/src/_include/Makefile.am
@@ -0,0 +1,10 @@
+ipsec_SCRIPTS = _include
+CLEANFILES = _include
+dist_man8_MANS = _include.8
+EXTRA_DIST = _include.in
+
+_include : _include.in
+	sed \
+	-e "s:@IPSEC_SBINDIR@:$(sbindir):" \
+	$(srcdir)/$@.in > $@
+	chmod +x $@
--- /dev/null
+++ b/src/_include/_include.8
@@ -0,0 +1,37 @@
+.\"Generated by db2man.xsl. Don't modify this, modify the source.
+.de Sh \" Subsection
+.br
+.if t .Sp
+.ne 5
+.PP
+\fB\\$1\fR
+.PP
+..
+.de Sp \" Vertical space (when we can't use .PP)
+.if t .sp .5v
+.if n .sp
+..
+.de Ip \" List item
+.br
+.ie \\n(.$>=3 .ne \\$3
+.el .ne 3
+.IP "\\$1" \\$2
+..
+.TH "_INCLUDE" 8 "" "" ""
+.SH NAME
+ipsec _include \- internal script to process config files
+.SH "DESCRIPTION"
+
+.PP
+\fI_include\fR is used by \fI_confread\fR to process \fIinclude\fR directives in /etc/ipsec\&.conf\&.
+
+.SH "SEE ALSO"
+
+.PP
+\fBipsec\fR(8), \fBipsec__confread\fR(8)
+
+.SH "HISTORY"
+
+.PP
+Man page written for the Linux FreeS/WAN project <http://www\&.freeswan\&.org/: \fIhttp://www.freeswan.org/\fR> by Michael Richardson\&. Program written by Henry Spencer\&.
+
--- /dev/null
+++ b/src/_include/_include.in
@@ -0,0 +1,100 @@
+#! /bin/sh
+# implements nested file inclusion for control files, including wildcarding
+# Copyright (C) 1998, 1999  Henry Spencer.
+# 
+# This program is free software; you can redistribute it and/or modify it
+# under the terms of the GNU General Public License as published by the
+# Free Software Foundation; either version 2 of the License, or (at your
+# option) any later version.  See <http://www.fsf.org/copyleft/gpl.txt>.
+# 
+# This program is distributed in the hope that it will be useful, but
+# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
+# or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+# for more details.
+#
+# RCSID $Id: _include.in,v 1.17 2003-01-06 21:44:04 sam Exp $
+#
+# Output includes marker lines for file changes:
+#	"#< filename lineno" signals entry into that file
+#	"#> filename lineno" signals return to that file
+# The lineno is the line number of the *next* line.
+#
+# Errors are reported with a "#:message" line rather than on stderr.
+#
+# Lines which look like marker and report lines are never passed through.
+
+usage="Usage: $0 file ..."
+me="/usr/lib/ipsec/_include"
+
+for dummy
+do
+	case "$1" in
+	--inband)				;;	# back compatibility
+	--help)		echo "$usage" ; exit 0	;;
+	--version)	echo "$me $IPSEC_VERSION" ; exit 0		;;
+	--)		shift ; break		;;
+	-*)		echo "$0: unknown option \`$1'" >&2 ; exit 2	;;
+	*)		break			;;
+	esac
+	shift
+done
+
+case $# in
+0)	echo "$usage" >&2 ; exit 2	;;
+esac
+
+for f
+do
+	if test ! -r "$f"
+	then
+		if test ! "$f" = "/etc/ipsec.conf"
+		then
+			echo "#:cannot open configuration file \'$f\'"
+			if test "$f" = "/etc/ipsec.secrets"
+			then
+				echo "#:Your secrets file will be created when you start FreeS/WAN for the first time."
+			fi
+			exit 1
+		else
+			exit 1
+		fi
+	fi
+done
+
+awk 'BEGIN {
+	wasfile = ""
+}
+FNR == 1 {
+	print ""
+	print "#<", FILENAME, 1
+	lineno = 0
+	wasfile = FILENAME
+}
+{
+	lineno++
+	# lineno is now the number of this line
+}
+/^#[<>:]/ {
+	next
+}
+/^include[ \t]+/ {
+	orig = $0
+	sub(/[ \t]+#.*$/, "")
+	if (NF != 2) {
+		msg = "(" FILENAME ", line " lineno ")"
+		msg = msg " include syntax error in \"" orig "\""
+		print "#:" msg
+		exit 1
+	}
+	newfile = $2
+	if (newfile !~ /^\// && FILENAME ~ /\//) {
+		prefix = FILENAME
+		sub("[^/]+$", "", prefix)
+		newfile = prefix newfile
+	}
+	system("/usr/lib/ipsec/_include " newfile)
+	print ""
+	print "#>", FILENAME, lineno + 1
+	next
+}
+{ print }' $*
--- /dev/null
+++ b/src/_keycensor/Makefile.am
@@ -0,0 +1,10 @@
+ipsec_SCRIPTS = _keycensor
+CLEANFILES = _keycensor
+dist_man8_MANS = _keycensor.8
+EXTRA_DIST = _keycensor.in
+
+_keycensor : _keycensor.in
+	sed \
+	-e "s:@IPSEC_SBINDIR@:$(sbindir):" \
+	$(srcdir)/$@.in > $@
+	chmod +x $@
--- /dev/null
+++ b/src/_keycensor/_keycensor.8
@@ -0,0 +1,37 @@
+.\"Generated by db2man.xsl. Don't modify this, modify the source.
+.de Sh \" Subsection
+.br
+.if t .Sp
+.ne 5
+.PP
+\fB\\$1\fR
+.PP
+..
+.de Sp \" Vertical space (when we can't use .PP)
+.if t .sp .5v
+.if n .sp
+..
+.de Ip \" List item
+.br
+.ie \\n(.$>=3 .ne \\$3
+.el .ne 3
+.IP "\\$1" \\$2
+..
+.TH "_KEYCENSOR" 8 "" "" ""
+.SH NAME
+ipsec _keycensor \- internal routine to remove sensitive information
+.SH "DESCRIPTION"
+
+.PP
+\fI_keycensor\fR is used by \fIipsec barf\fR to process the /etc/ipsec\&.secrets file, removing private key info\&.
+
+.SH "SEE ALSO"
+
+.PP
+\fBipsec\fR(8), \fBipsec_barf\fR(8)
+
+.SH "HISTORY"
+
+.PP
+Man page written for the Linux FreeS/WAN project <http://www\&.freeswan\&.org/: \fIhttp://www.freeswan.org/\fR> by Michael Richardson\&. Original program by Henry Spencer\&.
+
--- /dev/null
+++ b/src/_keycensor/_keycensor.in
@@ -0,0 +1,52 @@
+#! /bin/sh
+# implements key censoring for barf
+# Copyright (C) 1999, 2002  Henry Spencer.
+# 
+# This program is free software; you can redistribute it and/or modify it
+# under the terms of the GNU General Public License as published by the
+# Free Software Foundation; either version 2 of the License, or (at your
+# option) any later version.  See <http://www.fsf.org/copyleft/gpl.txt>.
+# 
+# This program is distributed in the hope that it will be useful, but
+# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
+# or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+# for more details.
+#
+# RCSID $Id: _keycensor.in,v 1.9 2002-04-24 07:36:05 mcr Exp $
+
+usage="Usage: $0 [file ...]"
+me="/usr/lib/ipsec/_keycensor"
+
+for dummy
+do
+	case "$1" in
+	--help)		echo "$usage" ; exit 0	;;
+	--version)	echo "$me $IPSEC_VERSION" ; exit 0		;;
+	--)		shift ; break		;;
+	-*)		echo "$0: unknown option \`$1'" >&2 ; exit 2	;;
+	*)		break			;;
+	esac
+	shift
+done
+
+awk '	/(sig|enc|auth)key[ \t]*=[ \t]*[^%]/ {
+		i = match($0, /key[ \t]*=[ \t]*/)
+		i += RLENGTH
+		cold = substr($0, 1, i-1)
+		hot = substr($0, i)
+		sub(/[ \t]+(#.*)?$/, "", hot)
+		q = "'"'"'"	# single quote
+		if (hot ~ q)
+			cooled = "[cannot be condensed]"
+		else if (hot ~ /^0s/)
+			cooled = "[keyid " substr(hot, 3, 9) "]"
+		else {
+			run = "echo " q hot q " | md5sum"
+			run | getline
+			close(run)
+			cooled = "[sums to " substr($1, 1, 4) "...]"
+		}
+		print cold cooled
+		next
+	}
+	{ print }' $*
--- /dev/null
+++ b/src/_secretcensor/Makefile.am
@@ -0,0 +1,10 @@
+ipsec_SCRIPTS = _secretcensor
+CLEANFILES = _secretcensor
+dist_man8_MANS = _secretcensor.8
+EXTRA_DIST = _secretcensor.in
+
+_secretcensor : _secretcensor.in
+	sed \
+	-e "s:@IPSEC_SBINDIR@:$(sbindir):" \
+	$(srcdir)/$@.in > $@
+	chmod +x $@
--- /dev/null
+++ b/src/_secretcensor/_secretcensor.8
@@ -0,0 +1,37 @@
+.\"Generated by db2man.xsl. Don't modify this, modify the source.
+.de Sh \" Subsection
+.br
+.if t .Sp
+.ne 5
+.PP
+\fB\\$1\fR
+.PP
+..
+.de Sp \" Vertical space (when we can't use .PP)
+.if t .sp .5v
+.if n .sp
+..
+.de Ip \" List item
+.br
+.ie \\n(.$>=3 .ne \\$3
+.el .ne 3
+.IP "\\$1" \\$2
+..
+.TH "_SECRETCENSOR" 8 "" "" ""
+.SH NAME
+ipsec _secretcensor \- internal routing to sanitize files
+.SH "DESCRIPTION"
+
+.PP
+\fI_secretcensor\fR is called by \fIipsec barf\fR to process the /etc/ipsec\&.secrets file to remove the private key components from the file prior to revealing the contents\&.
+
+.SH "SEE ALSO"
+
+.PP
+\fBipsec\fR(8), \fBipsec_barf\fR(8)\&.
+
+.SH "HISTORY"
+
+.PP
+Man page written for the Linux FreeS/WAN project <http://www\&.freeswan\&.org/: \fIhttp://www.freeswan.org/\fR> by Michael Richardson\&. Original program by Henry Spencer\&.
+
--- /dev/null
+++ b/src/_secretcensor/_secretcensor.in
@@ -0,0 +1,75 @@
+#! /bin/sh
+# implements secret censoring for barf
+# Copyright (C) 1999  Henry Spencer.
+# 
+# This program is free software; you can redistribute it and/or modify it
+# under the terms of the GNU General Public License as published by the
+# Free Software Foundation; either version 2 of the License, or (at your
+# option) any later version.  See <http://www.fsf.org/copyleft/gpl.txt>.
+# 
+# This program is distributed in the hope that it will be useful, but
+# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
+# or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+# for more details.
+#
+# RCSID $Id: _secretcensor.in,v 1.10 2002-04-24 07:36:06 mcr Exp $
+
+usage="Usage: $0 [file ...]"
+me="/usr/lib/ipsec/_secretcensor"
+
+for dummy
+do
+	case "$1" in
+	--help)		echo "$usage" ; exit 0	;;
+	--version)	echo "$me $IPSEC_VERSION" ; exit 0		;;
+	--)		shift ; break		;;
+	-*)		echo "$0: unknown option \`$1'" >&2 ; exit 2	;;
+	*)		break			;;
+	esac
+	shift
+done
+
+awk '	function cool(hot,   q, cooled, run) {
+		# warning:  may destroy input line!
+		q = "'"'"'"	# single quote
+		if (hot ~ q)
+			return "[cannot be summed]"
+		if (hot ~ /^0s/)
+			return "[keyid " substr(hot, 3, 9) "]"
+		run = "echo " q hot q " | md5sum"
+		run | getline
+		close(run)
+		return "[sums to " substr($1, 1, 4) "...]"
+	}
+	/"/ {
+		i = match($0, /"[^"]+"/)
+		cold1 = substr($0, 1, i)
+		cold2 = substr($0, i+RLENGTH-1)
+		hot = substr($0, i+1, RLENGTH-2)
+		print cold1 cool(hot) cold2
+		next
+	}
+	/#pubkey=/ {
+		i = match($0, /^.*#pubkey=/)
+		i += RLENGTH-1
+		cold = substr($0, 1, i)
+		hot = substr($0, i+1)
+		print cold cool(hot)
+		next
+	}
+	/#IN KEY / {
+		i = match($0, /^.*[ \t][^ \t]/)
+		i += RLENGTH-2
+		cold = substr($0, 1, i)
+		hot = substr($0, i+1)
+		print cold cool("0s" hot)
+		next
+	}
+	/^[ \t]+(Modulus|P[a-z]+Exponent|Prime[12]|Exponent[12]|Coefficient):/ {
+		i = match($0, /^[^:]*:[ \t]*/)
+		i += RLENGTH-1
+		cold = substr($0, 1, i)
+		print cold "[...]"
+		next
+	}
+	{ print }' $*
--- /dev/null
+++ b/src/barf/Makefile.am
@@ -0,0 +1,10 @@
+ipsec_SCRIPTS = barf
+CLEANFILES = barf
+dist_man8_MANS = barf.8
+EXTRA_DIST = barf.in
+
+barf : barf.in
+	sed \
+	-e "s:@IPSEC_SBINDIR@:$(sbindir):" \
+	$(srcdir)/$@.in > $@
+	chmod +x $@
--- /dev/null
+++ b/src/barf/barf.8
@@ -0,0 +1,77 @@
+.\"Generated by db2man.xsl. Don't modify this, modify the source.
+.de Sh \" Subsection
+.br
+.if t .Sp
+.ne 5
+.PP
+\fB\\$1\fR
+.PP
+..
+.de Sp \" Vertical space (when we can't use .PP)
+.if t .sp .5v
+.if n .sp
+..
+.de Ip \" List item
+.br
+.ie \\n(.$>=3 .ne \\$3
+.el .ne 3
+.IP "\\$1" \\$2
+..
+.TH "IPSEC_BARF" 8 "17 March 2002" "" ""
+.SH NAME
+ipsec barf \- spew out collected IPsec debugging information
+.SH "SYNOPSIS"
+.ad l
+.hy 0
+.HP 6
+\fBipsec\fR \fIbarf\fR [\-\-short\ \-\-maxlines\ \fI<100>\fR]
+.ad
+.hy
+
+.SH "DESCRIPTION"
+
+.PP
+\fIBarf\fR outputs (on standard output) a collection of debugging information (contents of files, selections from logs, etc\&.) related to the IPsec encryption/authentication system\&. It is primarily a convenience for remote debugging, a single command which packages up (and labels) all information that might be relevant to diagnosing a problem in IPsec\&.
+
+.PP
+The \fB\-\-short\fR option limits the length of the log portion of \fIbarf\fR's output, which can otherwise be extremely voluminous if debug logging is turned on\&.
+
+.PP
+\fB\-\-maxlines <100>\fR option sets the length of some bits of information, currently netstat \-rn\&. Usefull on boxes where the routing table is thousands of lines long\&. Default is 100\&.
+
+.PP
+\fIBarf\fR censors its output, replacing keys and secrets with brief checksums to avoid revealing sensitive information\&.
+
+.PP
+Beware that the output of both commands is aimed at humans, not programs, and the output format is subject to change without warning\&.
+
+.PP
+\fIBarf\fR has to figure out which files in \fI/var/log\fR contain the IPsec log messages\&. It looks for KLIPS and general log messages first in \fImessages\fR and \fIsyslog\fR, and for Pluto messages first in \fIsecure\fR, \fIauth\&.log\fR, and \fIdebug\fR\&. In both cases, if it does not find what it is looking for in one of those “likely” places, it will resort to a brute\-force search of most (non\-compressed) files in \fI/var/log\fR\&.
+
+.SH "FILES"
+
+.nf
+
+/proc/net/*
+/var/log/*
+/etc/ipsec\&.conf
+/etc/ipsec\&.secrets
+
+.fi
+
+.SH "HISTORY"
+
+.PP
+Written for the Linux FreeS/WAN project <http://www\&.freeswan\&.org: \fIhttp://www.freeswan.org\fR> by Henry Spencer\&.
+
+.SH "BUGS"
+
+.PP
+\fIBarf\fR uses heuristics to try to pick relevant material out of the logs, and relevant messages which are not labelled with any of the tags that \fIbarf\fR looks for will be lost\&. We think we've eliminated the last such case, but one never knows\&.\&.\&.
+
+.PP
+Finding \fIupdown\fR scripts (so they can be included in output) is, in general, difficult\&. \fIBarf\fR uses a very simple heuristic that is easily fooled\&.
+
+.PP
+The brute\-force search for the right log files can get expensive on systems with a lot of clutter in \fI/var/log\fR\&.
+
--- /dev/null
+++ b/src/barf/barf.in
@@ -0,0 +1,228 @@
+#! /bin/sh
+# dump assorted information of use in debugging
+# Copyright (C) 1998, 1999  Henry Spencer.
+# 
+# This program is free software; you can redistribute it and/or modify it
+# under the terms of the GNU General Public License as published by the
+# Free Software Foundation; either version 2 of the License, or (at your
+# option) any later version.  See <http://www.fsf.org/copyleft/gpl.txt>.
+# 
+# This program is distributed in the hope that it will be useful, but
+# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
+# or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+# for more details.
+#
+# RCSID $Id: barf.in,v 1.107.2.7 2006-11-07 03:49:18 paul Exp $
+
+LOGS=${LOGS-/var/log}
+CONFS=${IPSEC_CONFS-/etc}
+CONFDDIR=${IPSEC_CONFDDIR-/etc/ipsec.d}
+me="/usr/lib/ipsec/barf"
+# Max lines to use for things like 'route -n'
+maxlines=100
+
+# kludge to produce no barf output mentioning policygroups if none are present.
+# This will not catch ".file" policygroups. 
+PREPOLICIES=${CONFDDIR}/policies
+if [ `ls $PREPOLICIES 2> /dev/null | wc -l` -ne 0 ]
+then
+	POLICIES=$PREPOLICIES
+fi
+
+# message patterns that start relevant parts of logs
+pluto_start='Starting IKEv1 pluto daemon'
+charon_start='Starting IKEv2 charon daemon'
+plutolognull='no'
+
+case "$1" in
+--help)		echo "Usage: ipsec barf" ; exit 0	;;
+--version)	echo "$me $IPSEC_VERSION" ; exit 0	;;
+--maxlines)     maxlines=$2; shift;;
+esac
+
+# make sure output is in English
+unset LANG LANGUAGE LC_ALL LC_MESSAGES
+
+# log-location guesser, results in $findlog_file and $findlog_startline
+# Fine point:  startline is the *last* line containing "string", or
+# failing that, the *first* line containing "fallbackstring".
+findlog() {		# findlog string fallbackstring possiblefile ...
+	s="$1"
+	shift
+	t="$1"
+	shift
+	# try the suggested files first
+	for f in $*
+	do
+		if test -s $LOGS/$f -a -f $LOGS/$f && egrep -q "$s" $LOGS/$f
+		then
+			# aha, this one has it
+			findlog_file=$LOGS/$f
+			findlog_startline=`egrep -n "$s" $LOGS/$f |
+				sed -n '$s/:.*//p'`
+			return 0
+		fi
+	done
+	for f in $*
+	do
+		if test -s $LOGS/$f -a -f $LOGS/$f && egrep -q "$t" $LOGS/$f
+		then
+			# aha, this one has it
+			findlog_file=$LOGS/$f
+			findlog_startline=`egrep -n "$t" $LOGS/$f |
+				sed -n '1s/:.*//p'`
+			return 0
+		fi
+	done
+	# nope, resort to a search, newest first, of uncompressed logs
+	for f in `ls -t $LOGS | egrep -v '^mail' | egrep -v '\.(gz|Z)$'`
+	do
+		if test -f $LOGS/$f -a ! -d $LOGS/$f && egrep -q "$s" $LOGS/$f
+		then
+			# found it
+			findlog_file=$LOGS/$f
+			findlog_startline=`egrep -n "$s" $LOGS/$f |
+				sed -n '$s/:.*//p'`
+			return 0
+		fi
+	done
+	for f in `ls -t $LOGS | egrep -v '^mail' | egrep -v '\.(gz|Z)$'`
+	do
+		if test -s $LOGS/$f -a -f $LOGS/$f && egrep -q "$t" $LOGS/$f
+		then
+			# found it
+			findlog_file=$LOGS/$f
+			findlog_startline=`egrep -n "$t" $LOGS/$f |
+				sed -n '1s/:.*//p'`
+			return 0
+		fi
+	done
+# 	echo "$0: unable to find $LOGS/$1 or local equivalent" >&2
+	findlog_file=/dev/null
+	findlog_startline=1		# arbitrary
+}
+
+# try to guess where logs are
+findlog "$pluto_start" "nothing-else" messages syslog auth.log daemon.log
+if test " $findlog_file" = " /dev/null" 
+then
+echo "Unable to find IKEv1 messages, typically found in /var/log/messages or equivalent. You may need to run Strongswan for the first time; alternatively, your log files have been emptied (ie, logwatch) or we do not understand your logging configuration."
+plutolognull='yes'
+fi
+plutolog=$findlog_file
+kline=$findlog_startline
+
+findlog "$charon_start" "nothing-else" secure auth.log daemon.log debug
+if test " $findlog_file" = " /dev/null" 
+then
+if test 'plutolognull' = 'yes'
+then
+echo "Unable to find IKEv2 messages, typically found in /var/log/secure or equivalent. You may need to run Strongswan for the first time or you may have IKEv2 turned off; alternatively, your log files have been emptied (ie, logwatch) or we do not understand your logging configuration."
+else
+echo "Unable to find IKEv2 messages. Strongswan might be running with IKEv2 turned off or alternatively, your log files have been emptied (ie, logwatch)"
+fi
+fi 
+charonlog=$findlog_file
+pline=$findlog_startline
+
+# /lib/modules examiner
+modulegoo() {
+	set +x
+	for d in `ls /lib/modules`
+	do
+		if test -d /lib/modules/$d
+		then
+			f=/lib/modules/$d/$1
+			if test -f $f
+			then
+				nm -g $f | egrep "$2"
+			else
+				echo
+			fi | sed "s;^;$d: ;"
+		fi
+	done
+	set -x
+}
+
+# advanced shell deviousness to get dividers into output
+_________________________() {
+	$2	# something to do nothing and not echo anything
+}
+
+exec 2>&1		# stderr on stdout, so errors go into main output
+
+hostname ; date
+set -x
+_________________________ version
+ipsec --version
+_________________________ /proc/net/pfkey
+if test -r /proc/net/pfkey
+then
+	cat /proc/net/pfkey
+_________________________ ip-xfrm-state
+	ip -s xfrm state
+_________________________ ip-xfrm-policy
+	ip -s xfrm policy
+fi
+_________________________ /proc/sys/net/ipsec-star
+if test -d /proc/sys/net/ipsec
+then
+	( cd /proc/sys/net/ipsec && egrep '^' * )
+fi
+_________________________ ipsec/status
+ipsec statusall
+_________________________ routing/tables
+ip rule list
+_________________________ ip/route
+/opt/vyatta/bin/vtyshow.pl show ip route
+_________________________ ipsec/directory
+ipsec --directory
+_________________________ ps
+# -i ppid picks up the header
+ps alxwf | egrep -i 'ppid|pluto|ipsec|klips'
+_________________________ ipsec/conf
+/usr/lib/ipsec/_include $CONFS/ipsec.conf | /usr/lib/ipsec/_keycensor
+_________________________ ipsec/secrets
+/usr/lib/ipsec/_include $CONFS/ipsec.secrets | /usr/lib/ipsec/_secretcensor
+_________________________ ipsec/listall
+ipsec listall
+if [ $POLICIES ]
+then
+	for policy in $POLICIES/*; do base=`basename $policy`;
+	   _________________________ ipsec/policies/$base
+	   cat $policy
+	done
+fi
+_________________________ /proc/net/ipsec_version
+if test -r /proc/net/ipsec_version
+then
+	cat /proc/net/ipsec_version
+else
+	if test -r /proc/net/pfkey
+	then
+		echo "NETKEY (`uname -r`) support detected "
+	else
+		echo "no KLIPS or NETKEY support detected"
+	fi
+fi
+_________________________ /proc/net/ipsec-ls
+if test -f /proc/net/ipsec_version
+then
+	ls -l /proc/net/ipsec_*
+fi
+_________________________ plutolog
+sed -n $kline,'$'p $plutolog |
+	egrep -i 'pluto' |
+	case "$1" in
+	--short)	tail -500	;;
+	*)		cat		;;
+	esac
+_________________________ charonlog
+sed -n $pline,'$'p $charonlog |
+	egrep -i 'charon' |
+	case "$1" in
+	--short)	tail -500	;;
+	*)		cat		;;
+	esac
+_________________________ date
+date
--- a/src/Makefile.am
+++ b/src/Makefile.am
@@ -146,3 +146,5 @@
 if USE_TPM
   SUBDIRS += tpm_extendpcr
 endif
+
+SUBDIRS += barf _include _keycensor _secretcensor
--- a/configure.ac
+++ b/configure.ac
@@ -2059,6 +2059,10 @@
 	src/xfrmi/Makefile
 	scripts/Makefile
 	testing/Makefile
+	src/barf/Makefile
+	src/_include/Makefile
+	src/_keycensor/Makefile
+	src/_secretcensor/Makefile
 ])
 
 # =================
