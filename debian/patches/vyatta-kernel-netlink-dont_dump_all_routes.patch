--- a/src/libcharon/plugins/kernel_netlink/kernel_netlink_net.c
+++ b/src/libcharon/plugins/kernel_netlink/kernel_netlink_net.c
@@ -461,6 +461,11 @@
 	 * MSS to set on installed routes
 	 */
 	uint32_t mss;
+
+	/**
+	 * whether to dump all routes if required
+	 */
+	bool dump_all_routes;
 };
 
 /**
@@ -1892,7 +1897,7 @@
 	{	/* kernels prior to 3.0 do not support RTA_PREFSRC for IPv6 routes.
 		 * as we want to ignore routes with virtual IPs we cannot use DUMP
 		 * if these routes are not installed in a separate table */
-		if (this->install_routes)
+		if (this->install_routes && this->dump_all_routes)
 		{
 			hdr->nlmsg_flags |= NLM_F_DUMP;
 		}
@@ -3151,6 +3156,8 @@
 						"%s.install_virtual_ip_on", NULL, lib->ns),
 		.prefer_temporary_addrs = lib->settings->get_bool(lib->settings,
 						"%s.prefer_temporary_addrs", FALSE, lib->ns),
+		.dump_all_routes = lib->settings->get_bool(lib->settings,
+						"%s.plugins.kernel-netlink.dump_all_routes", TRUE, lib->ns),
 		.roam_events = lib->settings->get_bool(lib->settings,
 						"%s.plugins.kernel-netlink.roam_events", TRUE, lib->ns),
 		.process_rules = lib->settings->get_bool(lib->settings,
--- a/conf/plugins/kernel-netlink.opt
+++ b/conf/plugins/kernel-netlink.opt
@@ -9,6 +9,9 @@
 	/proc/sys/net/core/rmem_max, this option can be used to override the limit.
 	Enabling this option requires special privileges (CAP_NET_ADMIN).
 
+charon.plugins.kernel-netlink.dump_all_routes = yes
+	Whether to dump all routes from the kernel to find the preferred route
+
 charon.plugins.kernel-netlink.fwmark =
 	Firewall mark to set on the routing rule that directs traffic to our routing
 	table.
