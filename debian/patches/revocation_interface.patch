--- a/conf/plugins/revocation.opt
+++ b/conf/plugins/revocation.opt
@@ -4,4 +4,6 @@
 charon.plugins.revocation.enable_crl = yes
 	Whether CRL validation should be enabled.
 
+charon.plugins.revocation.interface
+	Interface to use for OCSP/CRL validation.
 
--- a/src/libstrongswan/fetcher/fetcher.h
+++ b/src/libstrongswan/fetcher/fetcher.h
@@ -102,6 +102,12 @@
 	FETCH_SOURCEIP,
 
 	/**
+	 * Interface to bind for a fetch.
+	 * Additional argument is a char*.
+	 */
+        FETCH_INTERFACE,
+
+	/**
 	 * end of fetching options
 	 */
 	FETCH_END,
--- a/src/libstrongswan/fetcher/fetcher_manager.c
+++ b/src/libstrongswan/fetcher/fetcher_manager.c
@@ -99,6 +99,7 @@
 					continue;
 				case FETCH_REQUEST_TYPE:
 				case FETCH_REQUEST_HEADER:
+				case FETCH_INTERFACE:
 					good = fetcher->set_option(fetcher, opt,
 											va_arg(args, char*));
 					continue;
--- a/src/libstrongswan/plugins/curl/curl_fetcher.c
+++ b/src/libstrongswan/plugins/curl/curl_fetcher.c
@@ -234,6 +234,16 @@
 										 buf) == CURLE_OK;
 			break;
 		}
+		case FETCH_INTERFACE:
+		{
+			char *intf = va_arg(args, char*);
+			if (intf)
+			{
+				supported = curl_easy_setopt(this->curl, CURLOPT_INTERFACE,
+											 intf) == CURLE_OK;
+			}
+			break;
+		}
 		default:
 			supported = FALSE;
 			break;
--- a/src/libstrongswan/plugins/revocation/revocation_validator.c
+++ b/src/libstrongswan/plugins/revocation/revocation_validator.c
@@ -52,6 +52,11 @@
 	bool enable_crl;
 
 	/**
+	 * Interface to bind to
+	 */
+	char *interface;
+
+	/**
 	 * Lock to access flags
 	 */
 	spinlock_t *lock;
@@ -61,7 +66,7 @@
  * Do an OCSP request
  */
 static certificate_t *fetch_ocsp(char *url, certificate_t *subject,
-								 certificate_t *issuer)
+								 certificate_t *issuer, char *intf)
 {
 	certificate_t *request, *response;
 	ocsp_request_t *ocsp_request;
@@ -86,10 +91,18 @@
 		return NULL;
 	}
 
-	DBG1(DBG_CFG, "  requesting ocsp status from '%s' ...", url);
+        if (intf)
+	{
+		DBG1(DBG_CFG, "  requesting ocsp status from '%s' via interface '%s'", url, intf);
+	}
+	else
+	{
+		DBG1(DBG_CFG, "  requesting ocsp status from '%s' ...", url);
+	}
 	if (lib->fetcher->fetch(lib->fetcher, url, &receive,
 							FETCH_REQUEST_DATA, send,
 							FETCH_REQUEST_TYPE, "application/ocsp-request",
+							FETCH_INTERFACE, intf,
 							FETCH_END) != SUCCESS)
 	{
 		DBG1(DBG_CFG, "ocsp request to %s failed", url);
@@ -294,7 +307,7 @@
  * validate a x509 certificate using OCSP
  */
 static cert_validation_t check_ocsp(x509_t *subject, x509_t *issuer,
-									auth_cfg_t *auth)
+									auth_cfg_t *auth, char *intf)
 {
 	enumerator_t *enumerator;
 	cert_validation_t valid = VALIDATION_SKIPPED;
@@ -333,7 +346,7 @@
 											CERT_X509_OCSP_RESPONSE, keyid);
 		while (enumerator->enumerate(enumerator, &uri))
 		{
-			current = fetch_ocsp(uri, &subject->interface, &issuer->interface);
+			current = fetch_ocsp(uri, &subject->interface, &issuer->interface, intf);
 			if (current)
 			{
 				best = get_better_ocsp(current, best, subject, issuer,
@@ -355,7 +368,7 @@
 		enumerator = subject->create_ocsp_uri_enumerator(subject);
 		while (enumerator->enumerate(enumerator, &uri))
 		{
-			current = fetch_ocsp(uri, &subject->interface, &issuer->interface);
+			current = fetch_ocsp(uri, &subject->interface, &issuer->interface, intf);
 			if (current)
 			{
 				best = get_better_ocsp(current, best, subject, issuer,
@@ -385,13 +398,14 @@
 /**
  * fetch a CRL from an URL
  */
-static certificate_t* fetch_crl(char *url)
+static certificate_t* fetch_crl(char *url, char *intf)
 {
 	certificate_t *crl;
 	chunk_t chunk = chunk_empty;
 
 	DBG1(DBG_CFG, "  fetching crl from '%s' ...", url);
-	if (lib->fetcher->fetch(lib->fetcher, url, &chunk, FETCH_END) != SUCCESS)
+	if (lib->fetcher->fetch(lib->fetcher, url, &chunk, FETCH_INTERFACE, intf,
+								FETCH_END) != SUCCESS)
 	{
 		DBG1(DBG_CFG, "crl fetching failed");
 		chunk_free(&chunk);
@@ -570,7 +584,7 @@
  */
 static cert_validation_t find_crl(x509_t *subject, identification_t *issuer,
 								  crl_t *base, certificate_t **best,
-								  bool *uri_found)
+								  bool *uri_found, char *intf)
 {
 	cert_validation_t valid = VALIDATION_SKIPPED;
 	enumerator_t *enumerator;
@@ -600,7 +614,7 @@
 		while (enumerator->enumerate(enumerator, &uri))
 		{
 			*uri_found = TRUE;
-			current = fetch_crl(uri);
+			current = fetch_crl(uri, intf);
 			if (current)
 			{
 				if (!current->has_issuer(current, issuer))
@@ -652,7 +666,7 @@
  * Look for a delta CRL for a given base CRL
  */
 static cert_validation_t check_delta_crl(x509_t *subject, x509_t *issuer,
-									crl_t *base, cert_validation_t base_valid)
+								crl_t *base, cert_validation_t base_valid, char *intf)
 {
 	cert_validation_t valid = VALIDATION_SKIPPED;
 	certificate_t *best = NULL, *current, *cissuer = (certificate_t*)issuer;
@@ -667,7 +681,7 @@
 	if (chunk.len)
 	{
 		id = identification_create_from_encoding(ID_KEY_ID, chunk);
-		valid = find_crl(subject, id, base, &best, &uri);
+		valid = find_crl(subject, id, base, &best, &uri, intf);
 		id->destroy(id);
 	}
 
@@ -678,7 +692,7 @@
 	{
 		if (cdp->issuer)
 		{
-			valid = find_crl(subject, cdp->issuer, base, &best, &uri);
+			valid = find_crl(subject, cdp->issuer, base, &best, &uri, intf);
 		}
 	}
 	enumerator->destroy(enumerator);
@@ -688,7 +702,7 @@
 	while (valid != VALIDATION_GOOD && valid != VALIDATION_REVOKED &&
 		   enumerator->enumerate(enumerator, &cdp))
 	{
-		current = fetch_crl(cdp->uri);
+		current = fetch_crl(cdp->uri, intf);
 		if (current)
 		{
 			if (!check_issuer(current, issuer, cdp))
@@ -721,7 +735,7 @@
  * validate a x509 certificate using CRL
  */
 static cert_validation_t check_crl(x509_t *subject, x509_t *issuer,
-								   auth_cfg_t *auth)
+								   auth_cfg_t *auth, char *intf)
 {
 	cert_validation_t valid = VALIDATION_SKIPPED;
 	certificate_t *best = NULL, *cissuer = (certificate_t*)issuer;
@@ -737,7 +751,7 @@
 	if (chunk.len)
 	{
 		id = identification_create_from_encoding(ID_KEY_ID, chunk);
-		valid = find_crl(subject, id, NULL, &best, &uri_found);
+		valid = find_crl(subject, id, NULL, &best, &uri_found, intf);
 		id->destroy(id);
 	}
 
@@ -748,7 +762,7 @@
 	{
 		if (cdp->issuer)
 		{
-			valid = find_crl(subject, cdp->issuer, NULL, &best, &uri_found);
+			valid = find_crl(subject, cdp->issuer, NULL, &best, &uri_found, intf);
 		}
 	}
 	enumerator->destroy(enumerator);
@@ -760,7 +774,7 @@
 		while (enumerator->enumerate(enumerator, &cdp))
 		{
 			uri_found = TRUE;
-			current = fetch_crl(cdp->uri);
+			current = fetch_crl(cdp->uri, intf);
 			if (current)
 			{
 				if (!check_issuer(current, issuer, cdp))
@@ -786,7 +800,7 @@
 	/* look for delta CRLs */
 	if (best && (valid == VALIDATION_GOOD || valid == VALIDATION_STALE))
 	{
-		valid = check_delta_crl(subject, issuer, (crl_t*)best, valid);
+		valid = check_delta_crl(subject, issuer, (crl_t*)best, valid, intf);
 	}
 
 	/* an uri was found, but no result. switch validation state to failed */
@@ -829,7 +843,7 @@
 
 		if (enable_ocsp)
 		{
-			switch (check_ocsp((x509_t*)subject, (x509_t*)issuer, auth))
+			switch (check_ocsp((x509_t*)subject, (x509_t*)issuer, auth, this->interface))
 			{
 				case VALIDATION_GOOD:
 					DBG1(DBG_CFG, "certificate status is good");
@@ -858,7 +872,7 @@
 
 		if (enable_crl)
 		{
-			switch (check_crl((x509_t*)subject, (x509_t*)issuer, auth))
+			switch (check_crl((x509_t*)subject, (x509_t*)issuer, auth, this->interface))
 			{
 				case VALIDATION_GOOD:
 					DBG1(DBG_CFG, "certificate status is good");
@@ -894,15 +908,21 @@
 	private_revocation_validator_t *this)
 {
 	bool enable_ocsp, enable_crl;
+	char *interface;
 
 	enable_ocsp = lib->settings->get_bool(lib->settings,
 							"%s.plugins.revocation.enable_ocsp", TRUE, lib->ns);
 	enable_crl  = lib->settings->get_bool(lib->settings,
 							"%s.plugins.revocation.enable_crl",  TRUE, lib->ns);
+	interface   = lib->settings->get_str(lib->settings,
+							"%s.plugins.revocation.interface", NULL, lib->ns);
+
+
 
 	this->lock->lock(this->lock);
 	this->enable_ocsp = enable_ocsp;
 	this->enable_crl = enable_crl;
+	this->interface = interface;
 	this->lock->unlock(this->lock);
 
 	if (!enable_ocsp)
