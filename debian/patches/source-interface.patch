--- a/src/charon-cmd/cmd/cmd_connection.c
+++ b/src/charon-cmd/cmd/cmd_connection.c
@@ -183,7 +183,7 @@
 		remote_port = IKEV2_NATT_PORT;
 	}
 	ike_cfg = ike_cfg_create(version, TRUE, FALSE, "0.0.0.0", local_port,
-					this->host, remote_port, FRAGMENTATION_NO, 0);
+					this->host, remote_port, NULL, FRAGMENTATION_NO, 0);
 	if (this->ike_proposals->get_count(this->ike_proposals))
 	{
 		while (this->ike_proposals->remove_first(this->ike_proposals,
--- a/src/charon-nm/nm/nm_service.c
+++ b/src/charon-nm/nm/nm_service.c
@@ -529,7 +529,7 @@
 	ike_cfg = ike_cfg_create(IKEV2, TRUE, encap, "0.0.0.0",
 							 charon->socket->get_port(charon->socket, FALSE),
 							(char*)address, IKEV2_UDP_PORT,
-							 FRAGMENTATION_YES, 0);
+							 NULL, FRAGMENTATION_YES, 0);
 
 	str = nm_setting_vpn_get_data_item(vpn, "proposal");
 	proposal = streq(str, "yes");
--- a/src/conftest/config.c
+++ b/src/conftest/config.c
@@ -114,7 +114,7 @@
 		settings->get_int(settings, "configs.%s.lport", 500, config),
 		settings->get_str(settings, "configs.%s.rhost", "%any", config),
 		settings->get_int(settings, "configs.%s.rport", 500, config),
-		FRAGMENTATION_NO, 0);
+		NULL, FRAGMENTATION_NO, 0);
 	token = settings->get_str(settings, "configs.%s.proposal", NULL, config);
 	if (token)
 	{
#--- a/src/frontends/android/app/src/main/jni/libandroidbridge/backend/android_service.c
#+++ b/src/frontends/android/app/src/main/jni/libandroidbridge/backend/android_service.c
#@@ -777,7 +777,7 @@
#									   TRUE);
#	ike_cfg = ike_cfg_create(IKEV2, certreq, TRUE, "0.0.0.0",
#							 charon->socket->get_port(charon->socket, FALSE),
#-							 server, port, FRAGMENTATION_YES, 0);
#+							 server, port, NULL, FRAGMENTATION_YES, 0);
#	proposal = parse_proposal(this, PROTO_IKE, "connection.ike_proposal");
#	if (proposal)
#	{
#--- a/src/frontends/osx/charon-xpc/xpc_dispatch.c
#+++ b/src/frontends/osx/charon-xpc/xpc_dispatch.c
#@@ -94,7 +94,7 @@
#		remote_port = IKEV2_NATT_PORT;
#	}
#	ike_cfg = ike_cfg_create(IKEV2, FALSE, FALSE, "0.0.0.0", local_port,
#-							 host, remote_port, FRAGMENTATION_NO, 0);
#+							 host, remote_port, NULL, FRAGMENTATION_NO, 0);
#	ike_cfg->add_proposal(ike_cfg, proposal_create_default(PROTO_IKE));
#	ike_cfg->add_proposal(ike_cfg, proposal_create_default_aead(PROTO_IKE));
#	peer_cfg = peer_cfg_create(name, ike_cfg, &peer);
--- a/src/libcharon/config/ike_cfg.c
+++ b/src/libcharon/config/ike_cfg.c
@@ -61,6 +61,11 @@
 	char *other;
 
 	/**
+	 * Source interface to bind on
+	 */
+	char *source_interface;
+
+	/**
 	 * Local single host or DNS names, as allocated char*
 	 */
 	linked_list_t *my_hosts;
@@ -273,6 +278,12 @@
 	return this->other_port;
 }
 
+METHOD(ike_cfg_t, get_source_interface, char*,
+	private_ike_cfg_t *this)
+{
+	return this->source_interface;
+}
+
 METHOD(ike_cfg_t, get_dscp, uint8_t,
 	private_ike_cfg_t *this)
 {
@@ -426,6 +437,7 @@
 		this->fragmentation == other->fragmentation &&
 		streq(this->me, other->me) &&
 		streq(this->other, other->other) &&
+		streq(this->source_interface, other->source_interface) &&
 		this->my_port == other->my_port &&
 		this->other_port == other->other_port;
 }
@@ -446,6 +458,10 @@
 										offsetof(proposal_t, destroy));
 		free(this->me);
 		free(this->other);
+		if (this->source_interface)
+		{
+			free(this->source_interface);
+		}
 		this->my_hosts->destroy_function(this->my_hosts, free);
 		this->other_hosts->destroy_function(this->other_hosts, free);
 		this->my_ranges->destroy_offset(this->my_ranges,
@@ -615,6 +631,7 @@
 ike_cfg_t *ike_cfg_create(ike_version_t version, bool certreq, bool force_encap,
 						  char *me, uint16_t my_port,
 						  char *other, uint16_t other_port,
+						  char *source_interface,
 						  fragmentation_t fragmentation, uint8_t dscp)
 {
 	private_ike_cfg_t *this;
@@ -633,6 +650,7 @@
 			.get_other_addr = _get_other_addr,
 			.get_my_port = _get_my_port,
 			.get_other_port = _get_other_port,
+			.get_source_interface = _get_source_interface,
 			.get_dscp = _get_dscp,
 			.add_proposal = _add_proposal,
 			.get_proposals = _get_proposals,
@@ -656,6 +674,7 @@
 		.other_hosts = linked_list_create(),
 		.my_port = my_port,
 		.other_port = other_port,
+		.source_interface = strdupnull(source_interface),
 		.dscp = dscp,
 		.proposals = linked_list_create(),
 	);
--- a/src/libcharon/plugins/ha/ha_tunnel.c
+++ b/src/libcharon/plugins/ha/ha_tunnel.c
@@ -224,7 +224,7 @@
 	/* create config and backend */
 	ike_cfg = ike_cfg_create(IKEV2, FALSE, FALSE, local,
 							 charon->socket->get_port(charon->socket, FALSE),
-							 remote, IKEV2_UDP_PORT, FRAGMENTATION_NO, 0);
+							 remote, IKEV2_UDP_PORT, NULL, FRAGMENTATION_NO, 0);
 	ike_cfg->add_proposal(ike_cfg, proposal_create_default(PROTO_IKE));
 	ike_cfg->add_proposal(ike_cfg, proposal_create_default_aead(PROTO_IKE));
 	peer_cfg = peer_cfg_create(HA_CFG_NAME, ike_cfg, &peer);
--- a/src/libcharon/plugins/load_tester/load_tester_config.c
+++ b/src/libcharon/plugins/load_tester/load_tester_config.c
@@ -739,14 +739,14 @@
 		ike_cfg = ike_cfg_create(this->version, TRUE, FALSE,
 								 local, this->port + num - 1,
 								 remote, IKEV2_NATT_PORT,
-								 FRAGMENTATION_NO, 0);
+								 NULL, FRAGMENTATION_NO, 0);
 	}
 	else
 	{
 		ike_cfg = ike_cfg_create(this->version, TRUE, FALSE, local,
 								 charon->socket->get_port(charon->socket, FALSE),
 								 remote, IKEV2_UDP_PORT,
-								 FRAGMENTATION_NO, 0);
+								 NULL, FRAGMENTATION_NO, 0);
 	}
 	ike_cfg->add_proposal(ike_cfg, this->proposal->clone(this->proposal));
 	peer_cfg = peer_cfg_create("load-test", ike_cfg, &peer);
--- a/src/libcharon/plugins/medcli/medcli_config.c
+++ b/src/libcharon/plugins/medcli/medcli_config.c
@@ -105,7 +105,7 @@
 	}
 	ike_cfg = ike_cfg_create(IKEV2, FALSE, FALSE, "0.0.0.0",
 							 charon->socket->get_port(charon->socket, FALSE),
-							 address, IKEV2_UDP_PORT, FRAGMENTATION_NO, 0);
+							 address, IKEV2_UDP_PORT, NULL, FRAGMENTATION_NO, 0);
 	ike_cfg->add_proposal(ike_cfg, proposal_create_default(PROTO_IKE));
 	ike_cfg->add_proposal(ike_cfg, proposal_create_default_aead(PROTO_IKE));
 
--- a/src/libcharon/plugins/medsrv/medsrv_config.c
+++ b/src/libcharon/plugins/medsrv/medsrv_config.c
@@ -146,7 +146,7 @@
 		.ike = ike_cfg_create(IKEV2, FALSE, FALSE, "0.0.0.0",
 							  charon->socket->get_port(charon->socket, FALSE),
 							  "0.0.0.0", IKEV2_UDP_PORT,
-							  FRAGMENTATION_NO, 0),
+							  NULL, FRAGMENTATION_NO, 0),
 	);
 	this->ike->add_proposal(this->ike, proposal_create_default(PROTO_IKE));
 	this->ike->add_proposal(this->ike, proposal_create_default_aead(PROTO_IKE));
--- a/src/libcharon/plugins/sql/sql_config.c
+++ b/src/libcharon/plugins/sql/sql_config.c
@@ -275,7 +275,7 @@
 
 		ike_cfg = ike_cfg_create(IKEV2, certreq, force_encap, local,
 								 charon->socket->get_port(charon->socket, FALSE),
-								 remote, IKEV2_UDP_PORT, FRAGMENTATION_NO, 0);
+								 remote, IKEV2_UDP_PORT, NULL, FRAGMENTATION_NO, 0);
 		add_ike_proposals(this, ike_cfg, id);
 		return ike_cfg;
 	}
--- a/src/libcharon/plugins/stroke/stroke_config.c
+++ b/src/libcharon/plugins/stroke/stroke_config.c
@@ -288,6 +288,7 @@
 							 msg->add_conn.other.allow_any ?
 								other : msg->add_conn.other.address,
 							 msg->add_conn.other.ikeport,
+							 NULL,
 							 msg->add_conn.fragmentation,
 							 msg->add_conn.ikedscp);
 
--- a/src/libcharon/plugins/uci/uci_config.c
+++ b/src/libcharon/plugins/uci/uci_config.c
@@ -169,7 +169,7 @@
 		ike_cfg = ike_cfg_create(IKEV2, FALSE, FALSE, local_addr,
 								 charon->socket->get_port(charon->socket, FALSE),
 								 remote_addr, IKEV2_UDP_PORT,
-								 FRAGMENTATION_NO, 0);
+								 NULL, FRAGMENTATION_NO, 0);
 		ike_cfg->add_proposal(ike_cfg, create_proposal(ike_proposal, PROTO_IKE));
 		peer.rekey_time = create_rekey(ike_rekey);
 		this->peer_cfg = peer_cfg_create(name, ike_cfg, &peer);
--- a/src/libcharon/plugins/vici/vici_config.c
+++ b/src/libcharon/plugins/vici/vici_config.c
@@ -328,6 +328,7 @@
 	uint64_t rand_time;
 	uint8_t dscp;
 	char *install_virtual_ip_on;
+	char *source_interface;
 #ifdef ME
 	bool mediation;
 	char *mediated_by;
@@ -434,6 +435,11 @@
 	{
 		DBG2(DBG_CFG, "  install_virtual_ip_on = %s", data->install_virtual_ip_on);
 	}
+	if (data->source_interface)
+	{
+		DBG2(DBG_CFG, "  source_interface = %s", data->source_interface);
+	}
+
 
 	if (data->vips->get_count(data->vips))
 	{
@@ -480,6 +486,7 @@
 	free(data->remote_addrs);
 	DESTROY_IF(data->ppk_id);
 	free(data->install_virtual_ip_on);
+	free(data->source_interface);
 #ifdef ME
 	free(data->mediated_by);
 	DESTROY_IF(data->peer_id);
@@ -1760,6 +1767,7 @@
 		{ "ppk_id",			parse_peer_id,		&peer->ppk_id				},
 		{ "ppk_required",	parse_bool,			&peer->ppk_required			},
 		{ "install_virtual_ip_on",	parse_string,			&peer->install_virtual_ip_on			},
+		{ "source_interface",		parse_string,			&peer->source_interface			},
 #ifdef ME
 		{ "mediation",		parse_bool,			&peer->mediation			},
 		{ "mediated_by",	parse_string,		&peer->mediated_by			},
@@ -2481,6 +2489,7 @@
 	ike_cfg = ike_cfg_create(peer.version, peer.send_certreq, peer.encap,
 						peer.local_addrs, peer.local_port,
 						peer.remote_addrs, peer.remote_port,
+						peer.source_interface,
 						peer.fragmentation, peer.dscp);
 
 	cfg = (peer_cfg_create_t){
--- a/src/libcharon/tests/suites/test_ike_cfg.c
+++ b/src/libcharon/tests/suites/test_ike_cfg.c
@@ -23,7 +23,7 @@
 	int family;
 
 	cfg = ike_cfg_create(IKEV2, FALSE, FALSE, local ? addr : "%any", 500,
-						 local ? "%any" : addr, 500, FRAGMENTATION_NO, 0);
+						 local ? "%any" : addr, 500, NULL, FRAGMENTATION_NO, 0);
 	family = ike_cfg_get_family(cfg, local);
 	ck_assert_msg(expected == family, "expected family %d != %d (addr: '%s')",
 				  expected, family, addr);
--- a/src/libcharon/tests/utils/exchange_test_helper.c
+++ b/src/libcharon/tests/utils/exchange_test_helper.c
@@ -89,7 +89,7 @@
 	char *proposal = NULL;
 
 	ike_cfg = ike_cfg_create(IKEV2, TRUE, FALSE, "127.0.0.1", IKEV2_UDP_PORT,
-							 "127.0.0.1", IKEV2_UDP_PORT, FRAGMENTATION_NO, 0);
+							 "127.0.0.1", IKEV2_UDP_PORT, NULL, FRAGMENTATION_NO, 0);
 	if (conf)
 	{
 		proposal = initiator ? conf->initiator.ike : conf->responder.ike;
--- a/src/libcharon/config/ike_cfg.h
+++ b/src/libcharon/config/ike_cfg.h
@@ -126,6 +126,13 @@
 	char* (*get_other_addr) (ike_cfg_t *this);
 
 	/**
+	 * Get source interface to bind on
+	 *
+	 * @return				string of source interface
+	 */
+	char* (*get_source_interface) (ike_cfg_t *this);
+
+	/**
 	 * Get the port to use as our source port.
 	 *
 	 * @return				source address port, host order
@@ -257,6 +264,7 @@
  * @param my_port			IKE port to use as source, 500 uses IKEv2 port floating
  * @param other				address/DNS name of remote peer
  * @param other_port		IKE port to use as dest, 500 uses IKEv2 port floating
+ * @param source_interface		source interface to bind on
  * @param fragmentation		use IKEv1 fragmentation
  * @param dscp				DSCP value to send IKE packets with
  * @return					ike_cfg_t object.
@@ -264,6 +272,7 @@
 ike_cfg_t *ike_cfg_create(ike_version_t version, bool certreq, bool force_encap,
 						  char *me, uint16_t my_port,
 						  char *other, uint16_t other_port,
+						  char *source_interface,
 						  fragmentation_t fragmentation, uint8_t dscp);
 
 /**
--- a/src/libcharon/kernel/kernel_interface.c
+++ b/src/libcharon/kernel/kernel_interface.c
@@ -514,13 +514,13 @@
 }
 
 METHOD(kernel_interface_t, get_source_addr, host_t*,
-	private_kernel_interface_t *this, host_t *dest, host_t *src)
+	private_kernel_interface_t *this, host_t *dest, host_t *src, char *oif)
 {
 	if (!this->net)
 	{
 		return NULL;
 	}
-	return this->net->get_source_addr(this->net, dest, src);
+	return this->net->get_source_addr(this->net, dest, src, oif);
 }
 
 METHOD(kernel_interface_t, get_nexthop, host_t*,
--- a/src/libcharon/kernel/kernel_interface.h
+++ b/src/libcharon/kernel/kernel_interface.h
@@ -277,10 +277,11 @@
 	 *
 	 * @param dest			target destination address
 	 * @param src			source address to check, or NULL
+	 * @param oif			source interface to check, or NULL
 	 * @return				outgoing source address, NULL if unreachable
 	 */
 	host_t* (*get_source_addr)(kernel_interface_t *this,
-							   host_t *dest, host_t *src);
+							   host_t *dest, host_t *src, char *oif);
 
 	/**
 	 * Get the next hop for a destination.
--- a/src/libcharon/kernel/kernel_net.h
+++ b/src/libcharon/kernel/kernel_net.h
@@ -73,9 +73,10 @@
 	 *
 	 * @param dest			target destination address
 	 * @param src			source address to check, or NULL
+	 * @param oif			source interface to check, or NULL
 	 * @return				outgoing source address, NULL if unreachable
 	 */
-	host_t* (*get_source_addr)(kernel_net_t *this, host_t *dest, host_t *src);
+	host_t* (*get_source_addr)(kernel_net_t *this, host_t *dest, host_t *src, char *oif);
 
 	/**
 	 * Get the next hop for a destination.
--- a/src/libcharon/plugins/dhcp/dhcp_socket.c
+++ b/src/libcharon/plugins/dhcp/dhcp_socket.c
@@ -221,7 +221,7 @@
 	else
 	{
 		/* act as relay agent */
-		src = charon->kernel->get_source_addr(charon->kernel, this->dst, NULL);
+		src = charon->kernel->get_source_addr(charon->kernel, this->dst, NULL, NULL);
 		if (src)
 		{
 			memcpy(&dhcp->gateway_address, src->get_address(src).ptr,
--- a/src/libcharon/plugins/kernel_iph/kernel_iph_net.c
+++ b/src/libcharon/plugins/kernel_iph/kernel_iph_net.c
@@ -538,7 +538,7 @@
 }
 
 METHOD(kernel_net_t, get_source_addr, host_t*,
-	private_kernel_iph_net_t *this, host_t *dest, host_t *src)
+	private_kernel_iph_net_t *this, host_t *dest, host_t *src, char *oif_notused)
 {
 	MIB_IPFORWARD_ROW2 route;
 	SOCKADDR_INET best, *sai_dst, *sai_src = NULL;
--- a/src/libcharon/plugins/kernel_netlink/kernel_netlink_net.c
+++ b/src/libcharon/plugins/kernel_netlink/kernel_netlink_net.c
@@ -2022,7 +2022,7 @@
  */
 static host_t *get_route(private_kernel_netlink_net_t *this, host_t *dest,
 						 int prefix, bool nexthop, host_t *candidate,
-						 char **iface, u_int recursion, char *domain)
+						 char **iface, u_int recursion, char *oif)
 {
 	netlink_buf_t request;
 	struct nlmsghdr *hdr, *out, *current;
@@ -2092,9 +2092,9 @@
 		netlink_add_attribute(hdr, RTA_DST, chunk, sizeof(request));
 	}
 
-	/* domain/VRF support */
-	if (domain) {
-		ifindex = get_interface_index(this, domain);
+	/* oif support also required for domain/VRF support */
+	if (oif) {
+		ifindex = get_interface_index(this, oif);
 		chunk.ptr = (char*)&ifindex;
 		chunk.len = sizeof(ifindex);
 		netlink_add_attribute(hdr, RTA_OIF, chunk, sizeof(request));
@@ -2261,7 +2261,7 @@
 			if (gtw && !gtw->ip_equals(gtw, dest))
 			{
 				route->src_host = get_route(this, gtw, -1, FALSE, candidate,
-											iface, recursion + 1, domain);
+											iface, recursion + 1, oif);
 			}
 			DESTROY_IF(gtw);
 			if (route->src_host)
@@ -2330,9 +2330,9 @@
 }
 
 METHOD(kernel_net_t, get_source_addr, host_t*,
-	private_kernel_netlink_net_t *this, host_t *dest, host_t *src)
+	private_kernel_netlink_net_t *this, host_t *dest, host_t *src, char *oif)
 {
-	return get_route(this, dest, -1, FALSE, src, NULL, 0, NULL);
+	return get_route(this, dest, -1, FALSE, src, NULL, 0, oif);
 }
 
 METHOD(kernel_net_t, get_nexthop, host_t*,
--- a/src/libcharon/plugins/kernel_pfroute/kernel_pfroute_net.c
+++ b/src/libcharon/plugins/kernel_pfroute/kernel_pfroute_net.c
@@ -1707,7 +1707,7 @@
 }
 
 METHOD(kernel_net_t, get_source_addr, host_t*,
-	private_kernel_pfroute_net_t *this, host_t *dest, host_t *src)
+	private_kernel_pfroute_net_t *this, host_t *dest, host_t *src, char *oif_notused)
 {
 	return get_route(this, FALSE, dest, src, NULL);
 }
--- a/src/libcharon/sa/ike_sa.c
+++ b/src/libcharon/sa/ike_sa.c
@@ -1438,7 +1438,8 @@
 		{
 			host->destroy(host);
 			host = charon->kernel->get_source_addr(charon->kernel,
-												   this->other_host, NULL);
+								   this->other_host, NULL,
+								   this->ike_cfg->get_source_interface(this->ike_cfg));
 			if (host)
 			{
 				host->set_port(host, this->ike_cfg->get_my_port(this->ike_cfg));
@@ -2503,6 +2504,12 @@
 {
 	bool valid = FALSE;
 	host_t *src;
+	char *source_interface = NULL;
+
+	if (this->ike_cfg)
+	{
+		source_interface = this->ike_cfg->get_source_interface(this->ike_cfg);
+	}
 
 	if (supports_extension(this, EXT_MOBIKE) &&
 		lib->settings->get_bool(lib->settings,
@@ -2510,7 +2517,7 @@
 	{
 		/* check if the current path is the best path; migrate otherwise */
 		src = charon->kernel->get_source_addr(charon->kernel, this->other_host,
-											  NULL);
+										  NULL, source_interface);
 		if (src)
 		{
 			valid = src->ip_equals(src, this->my_host);
@@ -2523,7 +2530,7 @@
 		return valid;
 	}
 	src = charon->kernel->get_source_addr(charon->kernel, this->other_host,
-										  this->my_host);
+										  this->my_host, source_interface);
 	if (src)
 	{
 		if (src->ip_equals(src, this->my_host))
@@ -2548,6 +2555,13 @@
 	enumerator_t *enumerator;
 	host_t *src = NULL, *addr;
 	int family = AF_UNSPEC;
+	char *source_interface = NULL;
+
+	if (this->ike_cfg)
+	{
+		source_interface = this->ike_cfg->get_source_interface(this->ike_cfg);
+	}
+
 
 	switch (charon->socket->supported_families(charon->socket))
 	{
@@ -2570,7 +2584,7 @@
 			continue;
 		}
 		DBG1(DBG_IKE, "looking for a route to %H ...", addr);
-		src = charon->kernel->get_source_addr(charon->kernel, addr, NULL);
+		src = charon->kernel->get_source_addr(charon->kernel, addr, NULL, source_interface);
 		if (src)
 		{
 			break;
--- a/src/libcharon/sa/ikev2/tasks/ike_mobike.c
+++ b/src/libcharon/sa/ikev2/tasks/ike_mobike.c
@@ -354,7 +354,7 @@
 
 	if (!this->check)
 	{
-		me = charon->kernel->get_source_addr(charon->kernel, other_old, me_old);
+		me = charon->kernel->get_source_addr(charon->kernel, other_old, me_old, NULL);
 		if (me)
 		{
 			if (me->ip_equals(me, me_old))
@@ -392,7 +392,7 @@
 		{
 			continue;
 		}
-		me = charon->kernel->get_source_addr(charon->kernel, other, NULL);
+		me = charon->kernel->get_source_addr(charon->kernel, other, NULL, NULL);
 		if (me)
 		{
 			/* reuse port for an active address, 4500 otherwise */
@@ -427,7 +427,7 @@
 		/* we check if the existing address is still valid */
 		old = message->get_source(message);
 		new = charon->kernel->get_source_addr(charon->kernel,
-										message->get_destination(message), old);
+										message->get_destination(message), old, NULL);
 		if (new)
 		{
 			if (!new->ip_equals(new, old))
--- a/src/libcharon/sa/ikev2/tasks/ike_natd.c
+++ b/src/libcharon/sa/ikev2/tasks/ike_natd.c
@@ -293,6 +293,7 @@
 	enumerator_t *enumerator;
 	ike_cfg_t *ike_cfg;
 	host_t *host;
+	char *source_interface = NULL;
 
 	if (this->hasher == NULL)
 	{
@@ -301,6 +302,10 @@
 	}
 
 	ike_cfg = this->ike_sa->get_ike_cfg(this->ike_sa);
+	if (ike_cfg)
+	{
+		source_interface = ike_cfg->get_source_interface(ike_cfg);
+	}
 
 	/* destination is always set */
 	host = message->get_destination(message);
@@ -327,7 +332,7 @@
 	else
 	{
 		host = charon->kernel->get_source_addr(charon->kernel,
-							this->ike_sa->get_other_host(this->ike_sa), NULL);
+							this->ike_sa->get_other_host(this->ike_sa), NULL, source_interface);
 		if (host)
 		{	/* 2. */
 			host->set_port(host, ike_cfg->get_my_port(ike_cfg));
--- a/src/libcharon/sa/trap_manager.c
+++ b/src/libcharon/sa/trap_manager.c
@@ -197,9 +197,11 @@
 	proposal_t *proposal;
 	protocol_id_t proto = PROTO_ESP;
 	bool result = FALSE, wildcard = FALSE;
+	char *source_interface = NULL;
 
 	/* try to resolve addresses */
 	ike_cfg = peer->get_ike_cfg(peer);
+	source_interface = ike_cfg->get_source_interface(ike_cfg);
 	other = ike_cfg->resolve_other(ike_cfg, AF_UNSPEC);
 	if (other && other->is_anyaddr(other) &&
 		child->get_mode(child) == MODE_TRANSPORT)
@@ -234,7 +236,7 @@
 		if ((!me || me->is_anyaddr(me)) && !other->is_anyaddr(other))
 		{
 			DESTROY_IF(me);
-			me = charon->kernel->get_source_addr(charon->kernel, other, NULL);
+			me = charon->kernel->get_source_addr(charon->kernel, other, NULL, source_interface);
 		}
 		if (!me)
 		{
--- a/src/swanctl/swanctl.opt
+++ b/src/swanctl/swanctl.opt
@@ -63,6 +63,17 @@
 	Remote UDP port for IKE communication. If the default of port _500_ is used,
 	automatic IKE port floating to port 4500 is used to work around NAT issues.
 
+connections.<conn>.source_interface =
+	Source interface to use for IKE communication
+
+	Source interface to use for IKE communication. Takes single interface name.
+
+	As initiator a route lookup is performed to obtain the source address to
+	initiate the IKE communication. This route lookup is limited to routes
+	using the specified interface as egress interface.
+
+	On Linux, the route lookup is performed with the attribute RTA_OIF set.
+
 connections.<conn>.proposals = default
 	Comma separated proposals to accept for IKE.
 
--- a/src/libcharon/tests/suites/test_peer_cfg.c
+++ b/src/libcharon/tests/suites/test_peer_cfg.c
@@ -24,7 +24,7 @@
 static ike_cfg_t *create_ike_cfg()
 {
 	return ike_cfg_create(IKEV2, TRUE, FALSE, "127.0.0.1", 500,
-						  "127.0.0.1", 500, FRAGMENTATION_NO, 0);
+						  "127.0.0.1", 500, NULL, FRAGMENTATION_NO, 0);
 }
 
 /**
